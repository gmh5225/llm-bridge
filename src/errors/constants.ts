import { UniversalErrorType } from "./types"

// Map HTTP status codes to universal error types
export const HTTP_STATUS_TO_ERROR_TYPE: Record<number, UniversalErrorType> = {
  400: "invalid_request_error",
  401: "authentication_error",
  403: "permission_error",
  404: "not_found_error",
  409: "already_exists",
  413: "context_length_exceeded",
  422: "invalid_argument",
  429: "rate_limit_error",
  500: "api_error",
  502: "unavailable",
  503: "unavailable",
  504: "deadline_exceeded",
}

// Map universal error types to HTTP status codes
export const ERROR_TYPE_TO_HTTP_STATUS: Record<UniversalErrorType, number> = {
  invalid_request_error: 400,
  invalid_argument: 400,
  context_length_exceeded: 400,
  prompt_too_long: 400,
  output_too_long: 400,
  invalid_model: 400,
  invalid_function_call: 400,
  content_policy_violation: 400,
  authentication_error: 401,
  unauthenticated: 401,
  permission_error: 403,
  permission_denied: 403,
  payment_required: 402,
  not_found_error: 404,
  model_not_found: 404,
  function_not_found: 404,
  already_exists: 409,
  rate_limit_error: 429,
  insufficient_quota: 429,
  resource_exhausted: 429,
  token_limit_exceeded: 429,
  api_error: 500,
  internal_error: 500,
  model_overloaded: 503,
  unavailable: 503,
  deadline_exceeded: 504,
  function_timeout: 504,
  aborted: 409,
  out_of_range: 400,
  unimplemented: 501,
  failed_precondition: 400,
  data_loss: 500,
  tool_error: 500,
  billing_error: 402,
  trial_expired: 402,
  safety_error: 400,
  model_not_supported: 400,
  content_filter_error: 400,
  unknown_error: 500,
}
